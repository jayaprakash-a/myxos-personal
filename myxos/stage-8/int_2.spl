alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); //calculating the physical address of the stack top


alias sysCallNo S1;

// Get system call no. from the stack and put it in a register
// Get arguments from stack and put it in registers

sysCallNo = [physicalSP-1];


if (sysCallNo == 2) then
	alias filename S2;

	filename = [physicalSP-3];

	alias temp S3;
	alias FAT_INDEX S4;
	alias flag S5;
	flag = -1;
	temp = FAT;
	while (temp < 6 * 512) do	//checking if a file with that name exists
		if ([temp] == filename) then
			flag = 0;
			FAT_INDEX = (temp-FAT)/8;	
		endif;
		temp = temp + 8;
	endwhile;
	if (flag == -1) then
		[physicalSP -2] = -1;
		ireturn;   //return after pushing -1 in the stack
	endif;
	alias counter S6;			
	counter = 0;
	alias ENTRY_SYS_TABLE S7;
	flag = -1;
	while ( counter <  128) do	//checking if there is an entry in system wide open table
		if([ FILE_TABLE + counter] == FAT_INDEX) then
			ENTRY_SYS_TABLE = counter/2;
			flag = 0;
			break;
		endif;	
		counter = counter + 2;			
	endwhile;
	if(flag == -1) then	//if there is no entry in sys_table then find a free entry 
		//alias FREE_ENTRY_SYS_TABLE S8;
		counter = 0;
		while ( counter <  128) do
			if([FILE_TABLE + counter] == -1)then
				ENTRY_SYS_TABLE = counter/2;
				flag = 1;
			endif;
			counter = counter + 2;			
		endwhile;	
	endif;
	alias currentPID S9;
	currentPID = (PTBR - 1024) / 8;
	//alias counter S0;
	counter = 15;
	alias PER_PROC_TABLE_FREE_ENTRY S10;
	PER_PROC_TABLE_FREE_ENTRY = -1;
	while(counter <= 30) do	//find a preprocess page table free entry 
		if([ READY_LIST + currentPID*32 +  counter ] == -1) then
			PER_PROC_TABLE_FREE_ENTRY = (counter - 15)/2;
			break;
		endif;
		counter = counter + 2;
	endwhile; 
	breakpoint;
	if (PER_PROC_TABLE_FREE_ENTRY == -1) then
		[physicalSP -2] = -1;
		ireturn;   //return after pushing -1 in the stack
	endif;
	[READY_LIST + currentPID*32 +  15 + PER_PROC_TABLE_FREE_ENTRY*2] = ENTRY_SYS_TABLE;
	[READY_LIST + currentPID*32 +  15 + PER_PROC_TABLE_FREE_ENTRY*2 + 1] = 0;	//lseek position is set to zero
	[FILE_TABLE + ENTRY_SYS_TABLE*2] = FAT_INDEX;


	[FILE_TABLE + ENTRY_SYS_TABLE*2 + 1] = [FILE_TABLE + ENTRY_SYS_TABLE*2 + 1] + 1;

	[physicalSP -2] = PER_PROC_TABLE_FREE_ENTRY;	//return the file descriptor
	ireturn;   //return after pushing -1 in the stack
	 
endif;
if(sysCallNo == 3) then
	alias file_descriptor S2;
	file_descriptor = [physicalSP-3];
	if(file_descriptor > 7 || file_descriptor < 0) then	//check if the file descriptor is valid
		[physicalSP -2] = -1;
		ireturn;   //return after pushing -1 in the stack
	endif;
	alias currentPID S3;
	currentPID = (PTBR - 1024) / 8;
	if([READY_LIST + 32*currentPID + 15 + file_descriptor*2] == -1) then
		[physicalSP -2] = -1;	//if pointer to sys_wide_table is -1 then it is invalid
		ireturn;   //return after pushing -1 in the stack
	endif;
	alias ENTRY_SYS_TABLE S4;
	ENTRY_SYS_TABLE = [READY_LIST + 32*currentPID + 15 + file_descriptor*2];
	[FILE_TABLE + 2*ENTRY_SYS_TABLE + 1] = [FILE_TABLE + 2*ENTRY_SYS_TABLE + 1] - 1;
	if([FILE_TABLE + 2*ENTRY_SYS_TABLE + 1] == 0) then	//decrementing the file count 
		[FILE_TABLE + 2*ENTRY_SYS_TABLE ] = -1; //if it is zero then it should be invalidated
	endif;
	[READY_LIST + 32*currentPID + 15 + file_descriptor*2] = -1;	//invalidating the preprocess open file table entry
	[physicalSP -2] = 0;
	ireturn;   //return after pushing 0 in the stack indicating success
endif;
ireturn;
