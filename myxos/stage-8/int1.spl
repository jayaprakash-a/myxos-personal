alias physical_stack_ptr S0;
physical_stack_ptr = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);


alias sysCallNo S1;
sysCallNo = [physical_stack_ptr - 1]; //The system call number is at the 2nd position from the top of the stack, i.e. SP - 1.


//The Create system call takes the filename of the file to be created as the argument
alias fileName S2;
fileName = [physical_stack_ptr - 3];//Fetch the arguments from 3rd position onwards in the stack

if (sysCallNo == 1) then
	alias index S3;
	index = FAT;
	//to check if a file with the same name already exists.
	while(index < 3072) do //????
		if([index] == fileName) then
			[physical_stack_ptr - 2] = 0;
			ireturn;
		endif;
		index = index + 8;
	endwhile;
	//If the file does not already exist, a file with this filename is to be created. 

	alias freeBlock S4;
	index = 3072;
	while(index < 3583) do// Till block number 447 Blocks 448 - 511 are reserved for swap area which will be used for virtual memory management
		if([index] == 0) then
			freeBlock = index;
			break;
		endif;
		
		index = index + 1;
	endwhile;

	freeBlock = freeBlock - 3072;
	if(freeBlock == -1) then
		[physical_stack_ptr - 2] = -1;
		ireturn;
	endif;

//the memory copy of the FAT is searched for a free entry. 
//A free entry in the FAT is indicated by -1 in the entry for basic block (word 2 of each FAT entry)
	
	alias fSpace S5;
	fSpace = -1;
	index = FAT;
	while (index < 3072) do
		if([index + 2] == -1) then
			fSpace = index;
			break;
		endif;
		index = index + 8;
	endwhile;

	if(fSpace == -1) then
		[physical_stack_ptr - 2] = -1;
		ireturn;
	endif;

	[fSpace] = fileName;
	[fSpace + 1] = 0;
	[fSpace + 2] = freeBlock;

//Scratchpad is a memory page used to load a disk block to memory for reading or editing. 
//It uses the same memory page as OS Startup Code

	load (1, freeBlock);

//All the words in the basic block loaded to the scratchpad must be set to -1. 
//This indicates that there are no data blocks currently for this file. 
//After this is done, the basic block residing in the scratchpad needs to be stored back to the disk

	alias size S6;
	size = 512;
	while(size < 2 * 512) do
		[size] = -1;
		size = size + 1;
	endwhile;
	
	[physical_stack_ptr - 2] = 0;
	store (1, freeBlock);
	[freeBlock + 3072] = 1;

//The updated copies of FAT and Disk Free List in the memory are then stored back to the disk. 

	store (5, 19);
	store (6, 20);
	ireturn;


endif;

if (sysCallNo == 4) then
	alias index S3;
	alias FAT_ENTRY S4;
	FAT_ENTRY = -1;
	index = FAT;
	//to check if a file with the same name already exists.
	while(index < 3072) do 
		if([index] == fileName) then
			FAT_ENTRY = (index - FAT) / 8;
		endif;
		index = index + 8;
	endwhile;
	
	if(FAT_ENTRY == -1) then
		[physical_stack_ptr -2] = -1;
		ireturn;   //return after pushing -1 in the stack
	endif;

	index = 0;
	while ( index <  128) do
		if([ FILE_TABLE + index] == FAT_ENTRY) then	
			[physical_stack_ptr - 2] = -1;
			ireturn;   //this indicates that file is opened by some process so we can't delete it
		endif;	
		index = index + 2;			
	endwhile;

	alias basic_block S5;
	basic_block  = [FAT + FAT_ENTRY * 8 + 2 ];
	load(1, basic_block);    //loading the basic block such that we can delete all the blocks of the file


	alias counter S6;
	alias temp S7;
	index = 512;
	
	while(index < 768) do//there are 256 basic blocks so we iterate over them to put empty string in all 
		
		temp = [index];
		
		if(temp == -1) then
			index = index + 1;
			continue;
		endif;
		
		load(1, temp);
		counter = 512;
		
		while(counter < 1024) do		//putting empty string in data blocks of the file one by one
			[counter] = "";
			counter = counter + 1;
		endwhile;
		
		index = index + 1;
		store(1, temp);
		load(1, basic_block);
		
		[ 6 * 512 + temp] = 0;

	endwhile;

	index = 512;
	load(1,basic_block);	//changing all the words in the basicblock to empty words
	
	while(index < 1024) do
		[index] = "";
		index = index + 1 ;
	endwhile;
	
	[6*512 + basic_block] = 0;	
	[FAT + FAT_ENTRY * 8 ] = -1;
	[FAT + FAT_ENTRY * 8 + 2 ] = -1;
	
	store(1, basic_block);
	store(5, 19); //storing the Fat table to the diskblock 19 from the memory page 5
	store(6, 20); //storing the diskfreelist to 20 from the memory page 6
	
	[physical_stack_ptr -2] = 0;
	
	ireturn;  //return with 0

endif;	

ireturn;		

