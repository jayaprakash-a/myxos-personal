alias currentPID S0;// Finding out the pid using the formula
currentPID = (PTBR - 1024) / 8;


alias currentPCB S1; // Finding the PCB of the current PID
currentPCB = READY_LIST + 32 * currentPID; 


//Set BP and SP fields in the PCB with values in registers BP and SP - 1. 
[ currentPCB + 2 ] = BP;
[ currentPCB + 3 ] = SP - 1; 
alias physicalSP S2;

//Physical page number corresponding to a logical address is obtained from the page table. logical address / 512 gives the logical page number.

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
// Since each page table entry has 2 words, multiply the logical page number by 2 to find the index of the page table entry corresponding to the logical page number. Adding PTBR to this will give the location of the page table entry corresponding to the given logical address.

// Offset into the page is calculated as offset = logical_address % 512

[ currentPCB + 4 ] = [ physicalSP ];

[ currentPCB + 5 ] = PTBR;
[ currentPCB + 6 ] = PTLR ;


[ currentPCB + 7 ] = R0;
[ currentPCB + 8 ] = R1;
[ currentPCB + 9 ] = R2;
[ currentPCB + 10 ] = R3;
[ currentPCB + 11 ] = R4;
[ currentPCB + 12 ] = R5;
[ currentPCB + 13 ] = R6;
[ currentPCB + 14 ] = R7;

//the next process to be scheduled for execution is to be selected. Done in round robuin fashion
alias newPCB S3;
alias newPID S4;

newPID = (currentPID +1)%32;
newPCB = READY_LIST + newPID*32;
if( [newPCB + 1] == 0) then
	newPID = 0;
	newPCB = READY_LIST + newPID*32;
endif;
//The register values of the newly found process were stored in its PCB when it was scheduled out at an earlier point in time. Now these values needs to be fetched from the PCB and loaded back into the machine registers, so that execution will resume from where it was scheduled out
PTBR = [newPCB + 5];
PTLR = [newPCB + 6];
BP = [newPCB + 2];
SP = [newPCB + 3];

R0 = [ newPCB +7];
R1 = [ newPCB +8];
R2 = [ newPCB +9];
R3 = [ newPCB +10];
R4 = [ newPCB +11];
R5 = [ newPCB +12];
R6 = [ newPCB +13];
R7 = [ newPCB +14];
SP = SP + 1;
alias newphysicalSP S2;
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack 

[ newPCB + 1] = 2;

print("timer");
print(newPID );
print(currentPID);
ireturn;
