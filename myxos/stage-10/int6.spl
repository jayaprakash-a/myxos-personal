alias physical_stack_ptr S0;
physical_stack_ptr = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sys_call_no S1;
sys_call_no = [physical_stack_ptr - 1];


if (sys_call_no == 9) then
	
	alias file_name S2;
	file_name = [physical_stack_ptr - 3];
//Exec system call needs to load the program which has the filename specified as argument from the disk to the memory. To do this, first search for the filename given as argument in the memory copy of FAT.
	alias index S3;
	index = FAT;

	while (index < 3072) do
		if ([index] == file_name) then
			break;
		endif;
		index = index + 8;
	endwhile;
//If it doesn't exist, i.e. if file with the given filename is not present in the disk, return with -1 (indicating failure). 
	if (index >= 3072) then
		[physical_stack_ptr - 2] = -1;			
		ireturn;
	endif;
//If a FAT entry is found, fetch the basic block of this file and place it in the scratchpad	
	alias basic_block S4;
	basic_block = [index + 2];

	if (basic_block == -1) then
		[physical_stack_ptr - 2] = -1;
		ireturn;
	endif;


	alias counter S10;
	counter = 0;
	alias counter_index S5;

	while (counter < 6) do
		counter_index = PTBR + counter;
		if ([counter_index] >= 448) then
			if ([counter_index + 1] == "00") then			
				[DISK_LIST + [counter_index]] = [DISK_LIST + [counter_index]] - 1;
			endif;
			if ([PTBR + counter + 1] == "01" || [PTBR + counter + 1] == "11") then
				[MEM_LIST + [counter_index]] = [MEM_LIST + [counter_index]] - 1;
			endif;
		endif;
		counter = counter + 2;
	endwhile;

	load (1, basic_block);
	counter = 512;
	counter_index = 0;
	while (counter < 768) do
		if (counter_index == 3) then
			break;
		endif;
		index = PTBR + 2 * counter_index;
		if ([counter] != -1) then
			[index + 1] = "00";
			[index] = [counter];			
			counter_index = counter_index + 1;
		endif;		
		counter = counter + 1;
	endwhile;

	[PTBR + 7] = "01";

	while (counter_index <= 2) do
		index = PTBR + 2 * counter_index;
		[index] = -1;
		[index + 1] = "00";
		counter_index = counter_index + 1;	
	endwhile;


//Close all files opened by the current process
	index = 0;
	alias pid S9;
	pid = (PTBR - 1024)/8;

	while (index < 8) do
		if ([READY_LIST + 32 * pid + 15 + 2 * index] != -1) then
			counter = [READY_LIST + 32*pid + 15 + 2*index];
			if ([FILE_TABLE + 2 * counter] == -1) then//Error
				[physical_stack_ptr - 2] = -1;				
				ireturn;	
			endif;
			
			[FILE_TABLE + 2*counter + 1] = [FILE_TABLE + 2*counter + 1] - 1;
			if ([FILE_TABLE + 2*counter + 1] == 0) then
				[FILE_TABLE + 2*counter] = -1;
			endif;
			
			[READY_LIST + 32*pid + 15 + 2*index] = -1;
			[READY_LIST + 32*pid + 15 + 2*index + 1] = 0;
	
		endif;
		index  = index + 1;
	endwhile;


	SP = 3 * 512;
	physical_stack_ptr = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	[physical_stack_ptr] = 0;
	
	ireturn;
	
endif;

//GEt pid

if (sys_call_no == 11) then
//The interrupt 6 routine for Exec system call must be modified to obtain the system call number and take actions according for getting pid of the process, if system call number is 11. The Getpid system call implementation can use the value of PTBR to compute PID as described in the previous stages. This value should be returned to the user program. 
	alias pid S2;
	pid = (PTBR - 1024)/8;
	
	if (pid <= -1) then					//checking the validity of pid
		[physical_stack_ptr - 2] = -1;
		ireturn;
	endif;
	
	if (pid >= 32) then
		[physical_stack_ptr - 2] = -1;
		ireturn;
	endif;

	
	[physical_stack_ptr - 2] = pid;
	ireturn;

endif;

//GET PPID 

if (sys_call_no == 12) then
	alias pid S2;
	pid = (PTBR - 1024)/8;
	
	if (pid <= -1) then					//checking the validity of pid
		[physical_stack_ptr - 2] = -1;
		ireturn;
	endif;
	
	if (pid >= 32) then
		[physical_stack_ptr - 2] = -1;
		ireturn;
	endif;

	alias parent_pid S3;
	parent_pid = [READY_LIST + 32*pid + 31];
//The Fork system call implementation must be modified, to store the PID of the parent in the Parent PID field in the PCB of the child process created. 	
	if (parent_pid <= -1) then					//checking the validity of parent pid
		[physical_stack_ptr - 2] = -1;
		ireturn;
	endif;
	
	if (parent_pid >= 32) then
		[physical_stack_ptr - 2] = -1;
		ireturn;
	endif;

	[physical_stack_ptr - 2] = parent_pid;
	ireturn;

endif;

ireturn;		
