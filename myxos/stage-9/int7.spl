//Author : Jayaprakash
// Stage 9 : INT  code
// Exit
alias physical_stack_ptr S0;
physical_stack_ptr = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physical_stack_ptr - 1];

//erminate the execution of the process which invoked it. Exit removes this process from the memory. If there is only one process, it halts the system.
if (sysCallNo == 10) then
	alias ready_process S2;
	ready_process = 0;

	while (ready_process < 1024) do
		if ([READY_LIST + ready_process + 1] > 101) then
			[READY_LIST + ready_process + 1] = 1;
		endif;
		ready_process = ready_process + 32;
	endwhile;

//f there is no ready process (indicated by STATE 1 in PCB) in memory, halt the system using halt SPL statement (which translates to HALT machine instruction). When the only running process in memory issues an Exit system call, the machine should halt. 
	ready_process = 0;
	while (ready_process < 1024) do
		if ([READY_LIST + ready_process + 1] == 1) then
			break;
		endif;
		ready_process = ready_process + 32;
	endwhile;
	if (ready_process >= 1024 ) then
		halt;
	endif;
	//Find the PCB of the current process. Traverse through the Ready List of PCBs to find the PCB with STATE set as running. As noted earlier, this can be calculated from the value of PTBR. 
	alias pid S3;
	pid = (PTBR - 1024)/8;
	//Close all open instances of files by the process as done for Close system call.
	alias counter S4;
	counter = 15;
	while (counter < 30) do
		if ([READY_LIST + 32 * pid + counter] != -1) then
			alias open_file S5;
			open_file = [READY_LIST + 32 * pid + counter];
			[FILE_TABLE + 2 * open_file + 1] = [FILE_TABLE + 2 * open_file + 1] - 1;
			if ([FILE_TABLE + 2 * open_file + 1] == 0) then
				[FILE_TABLE + 2 * open_file ] = -1;
			endif;
		endif;
		counter = counter + 2;
	endwhile;
//Set the STATE in the PCB to 0. This indicates that the process has terminated. 
	[READY_LIST + 32 * pid + 1] = 0;
//The entries of pages occupied by this process in the memory free list must decremented to 0, indicating unused. This is done by checking the per-process page table of the process. 
	alias physical_page S6;
	physical_page = 0;
	counter = 0;
	while (counter < 8) do
		if ([PTBR + counter] != -1) then
			physical_page = [PTBR + counter];
			[1280 + physical_page] = 0;
		endif;
		counter = counter + 2;
	endwhile;
//Invalidate all entries in its per-process page table. To do this, set Address field to -1 and the Valid/Invalid bit in the auxiliary information to "00". This indicates that the page table entry is not referenced and invalid.
	[PTBR + 0] = -1;
	[PTBR + 1] = "00";
	[PTBR + 2] = -1;
	[PTBR + 3] = "00";
	[PTBR + 4] = -1;
	[PTBR + 5] = "00";
	[PTBR + 6] = -1;
	[PTBR + 7] = "00";
//Schedule this process for execution by loading the registers from the PCB as done in Stage 6 for the timer interrupt routine. 
	[READY_LIST + ready_process + 1] = 2;

	BP = [READY_LIST + ready_process + 2];
	SP = [READY_LIST + ready_process + 3];
	PTBR = [READY_LIST + ready_process + 5];
	PTLR = [READY_LIST + ready_process + 6];
	R0 = [READY_LIST + ready_process + 7];
	R1 = [READY_LIST + ready_process + 8];
	R2 = [READY_LIST + ready_process + 9];
	R3 = [READY_LIST + ready_process + 10];
	R4 = [READY_LIST + ready_process + 11];
	R5 = [READY_LIST + ready_process + 12];
	R6 = [READY_LIST + ready_process + 13];
	R7 = [READY_LIST + ready_process + 14];

//Get the IP from its PCB and store it in top of the stack (Compute physical address of its SP)	
	SP = SP + 1;
	alias new_physical_stack_ptr S7;
	new_physical_stack_ptr = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	[new_physical_stack_ptr] = [ READY_LIST + ready_process + 4 ];
	
	ireturn;

endif;
